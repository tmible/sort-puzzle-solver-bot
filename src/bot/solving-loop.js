import { Worker } from 'worker_threads';
import { Markup } from 'telegraf';
import { CleanUpTimeout } from './constants/clean-up-timeout.const.js';
import { SolvingMethod } from '../constants/solving-method.const.js';
import { markMessageForReplace, replaceLastMessage } from './replace-messages.js';
import { pluralPipe } from '../utils.js';
import { visualizeSolution } from '../visualizer.js';

/**
 * –ß–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∞—è –æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ø–æ –ø–æ–∏—Å–∫—É —Ä–µ—à–µ–Ω–∏—è –∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏—é –ø–æ–∏—Å–∫–∞ —Ä–µ—à–µ–Ω–∏—è
 */

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
 * @constant {string}
 */
const LiveMessageText = '–ò—â—É —Ä–µ—à–µ–Ω–∏–µ ü§î\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–µ –≤—Ä–µ–º—è';

/**
 * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
 * @constant {number}
 */
const MaxPointsNumber = 26;

/**
 * –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
 * @constant {number}
 */
const LiveMessageUpdateInterval = 500;

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ—à–µ–Ω–∏—è –≤ –≤–∏–¥–µ —Ç–æ—á–µ–∫
 * @param {Context} ctx –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Telegraf
 * @returns {number} intervalID
 */
const sendLiveMessage = async (ctx) => {
  const liveMessage = await replaceLastMessage(ctx, LiveMessageText);
  markMessageForReplace(ctx, liveMessage);

  let pointsNumber = 0;
  const incrementPointsNumber = () => {
    pointsNumber = pointsNumber === MaxPointsNumber ? 1 : pointsNumber + 1;
    return pointsNumber;
  };

  const liveMessageUpdateInterval = setInterval(async () => {
    await ctx.telegram.editMessageText(
      liveMessage.chat.id,
      liveMessage.message_id,
      undefined,
      `${LiveMessageText}\n${new Array(incrementPointsNumber()).fill('.').join(' ')}`,
    );
  }, LiveMessageUpdateInterval);

  return liveMessageUpdateInterval;
};

/**
 * –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ä–µ—à–µ–Ω–∏—è
 * @param {Context} ctx –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Telegraf
 * @return {Promise<[ [ number, number ][], number ]>} –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –º–∞—Å—Å–∏–≤ –ø–∞—Ä –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–ª–±
 * –¥–ª—è –ø–µ—Ä–µ–ª–∏–≤–∞–Ω–∏–π –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—Ö –∫–æ–ª–±
 */
const initiateSolving = (ctx) => {
  return new Promise((resolve, reject) => {
    const worker = new Worker(
      './src/solver.js',
      {
        workerData: [
          ctx.session.layersMatrix,
          ctx.match[1],
        ],
      },
    );
    worker.on('message', resolve);
    worker.on('error', reject);
  });
};

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ,
 * —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ —Ä–µ—à–µ–Ω–∏—è –¥—Ä—É–≥–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
 * @param {Context} ctx –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Telegraf
 */
const sendSolutionNotFoundMessage = async (ctx) => {
  const message = await replaceLastMessage(
    ctx,
    '–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ ‚òπÔ∏è',
    Markup.inlineKeyboard(
      [
        [
          SolvingMethod.Fastest,
          Markup.button.callback(
            '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ —Å–∞–º–æ–µ –±—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ',
            `solve_${SolvingMethod.Fastest}_${ctx.match[2]}`,
          ),
        ],
        [
          SolvingMethod.Shortest,
          Markup.button.callback(
            '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ —Å–∞–º–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ',
            `solve_${SolvingMethod.Shortest}_${ctx.match[2]}`,
          ),
        ],
        [
          SolvingMethod.Balanced,
          Markup.button.callback(
            '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ –±–∞–ª–∞–Ω—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ',
            `solve_${SolvingMethod.Balanced}_${ctx.match[2]}`,
          ),
        ],
        [
          'cancel',
          Markup.button.callback(
            '–ù–µ –∏—Å–∫–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ',
            'cancel',
          ),
        ],
      ].filter(([ key ]) => key !== ctx.match[1]).map(([ _, button ]) => [ button ]),
      { one_time_keyboard: true },
    ),
  );

  markMessageForReplace(ctx, message);

  setTimeout(async () => {
    try {
      await ctx.telegram.editMessageReplyMarkup(
        message.chat.id,
        message.message_id,
        undefined,
        Markup.removeKeyboard(),
      );
    } finally {}
  }, CleanUpTimeout);
};

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—à–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–∫—Å—Ç–∞
 * @param {Context} ctx –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Telegraf
 * @param {[ number, number ][]} solution –º–∞—Å—Å–∏–≤ –ø–∞—Ä –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–ª–± –¥–ª—è –ø–µ—Ä–µ–ª–∏–≤–∞–Ω–∏–π
 * @param {number} requiredEmptyFlasksNumber –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—Ö –∫–æ–ª–±
 */
const sendTextSolution = (ctx, solution, requiredEmptyFlasksNumber) => {
  return replaceLastMessage(
    ctx,
    `–†–µ—à–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—é—â–µ–µ ${requiredEmptyFlasksNumber} ${
      pluralPipe(
        requiredEmptyFlasksNumber,
        [ '–ø—É—Å—Ç—É—é –∫–æ–ª–±–æ—á–∫—É', '–ø—É—Å—Ç—ã–µ –∫–æ–ª–±–æ—á–∫–∏', '–ø—É—Å—Ç—ã—Ö –∫–æ–ª–±–æ—á–µ–∫' ],
      )
    }:\n\`${
      solution.map((step) => step.map((flaskIndex) => flaskIndex + 1).join(' -> ')).join('\n')
    }\``,
    { parse_mode: 'MarkdownV2' },
  );
};

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—à–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * @param {Context} ctx –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Telegraf
 * @param {[ number, number ][]} solution –º–∞—Å—Å–∏–≤ –ø–∞—Ä –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–ª–± –¥–ª—è –ø–µ—Ä–µ–ª–∏–≤–∞–Ω–∏–π
 * @param {number} requiredEmptyFlasksNumber –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—Ö –∫–æ–ª–±
 */
const sendVisualizedSolution = async (ctx, solution, requiredEmptyFlasksNumber) => {
  const mediaGroup = visualizeSolution(
    solution,
    [
      ...ctx.session.layersMatrix,
      ...new Array(requiredEmptyFlasksNumber).fill(null).map(() => []),
    ],
    ctx.session.colors,
    ctx.session.imageData,
    requiredEmptyFlasksNumber,
  ).map((buffer, i) => ({
    type: 'photo',
    media: { source: buffer },
  }));

  for (let i = 10; i < mediaGroup.length; i += 10) {
    await replaceLastMessage(ctx, mediaGroup.slice(i - 10, i));
  }
  return replaceLastMessage(
    ctx,
    mediaGroup.slice(-(mediaGroup.length % 10 === 0 ? 10 : mediaGroup.length % 10)),
  );
};

export const configureSovlingLoop = (bot) => {
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –≤ –ø–æ–∏—Å–∫–µ —Ä–µ—à–µ–Ω–∏—è
   */
  bot.action(new RegExp(`^solve_(${Object.values(SolvingMethod).join('|')})$`), async (ctx) => {
    if (!ctx.session?.layersMatrix || !ctx.session.colors || !ctx.session?.imageData) {
      return;
    }

    markMessageForReplace(
      ctx,
      await replaceLastMessage(
        ctx,
        '–í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —à–∞–≥ —Ä–µ—à–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º?',
        Markup.inlineKeyboard(
          [
            [ Markup.button.callback('–í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å', `solve_${ctx.match[1]}_images`) ],
            [ Markup.button.callback('–¢–µ–∫—Å—Ç–æ–º', `solve_${ctx.match[1]}_text`) ],
            [ Markup.button.callback('–ù–µ –∏—Å–∫–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ', 'cancel') ],
          ],
          { one_time_keyboard: true },
        ),
      ),
    );
  });

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è,
   * –∑–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Ä–µ—à–µ–Ω–∏—è —Å —É—á—ë—Ç–æ–º –≤—ã–±–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
   * –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è —Å —É—á—ë—Ç–æ–º –≤—ã–±–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  bot.action(
    new RegExp(`^solve_(${Object.values(SolvingMethod).join('|')})_(images|text)$`),
    async (ctx) => {
      if (!ctx.session?.layersMatrix || !ctx.session.colors || !ctx.session?.imageData) {
        return;
      }

      const liveMessageUpdateInterval = await sendLiveMessage(ctx);

      const [ solution, requiredEmptyFlasksNumber ] = await initiateSolving(ctx);

      clearInterval(liveMessageUpdateInterval);

      if (!solution) {
        return sendSolutionNotFoundMessage(ctx);
      }

      setTimeout(() => {
        delete ctx.session.layersMatrix;
        delete ctx.session.colors;
        delete ctx.session.imageData;
      });

      if (ctx.match[2] === 'images') {
        return sendVisualizedSolution(ctx, solution, requiredEmptyFlasksNumber);
      }

      return sendTextSolution(ctx, solution, requiredEmptyFlasksNumber);
    },
  );
};
