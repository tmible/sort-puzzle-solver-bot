import { Markup } from 'telegraf';
import { SpotsInRunNumber } from '../constants/spots-in-run-number.const.js';
import { detectSpots, markSpots } from '../image-analyzer.js';
import { markMessageForReplace, replaceLastMessage } from './replace-messages.js';
import { numbersAndRangesToNumbers } from '../utils.js';

/**
 * –ß–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∞—è –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π,
 * –∏—Ö –∞–Ω–∞–ª–∏–∑ –∏ –æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–º
 */

/**
 * [–û—Ç–º–µ—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –ø–∞—Ä—Ç–∏—é –ø—è—Ç–µ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏]{@link markSpots} –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –≤–æ–ø—Ä–æ—Å–æ–º
 * @param {Context} ctx –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Telegraf
 */
const markNextSpots = async (ctx) => {
  const buffer = markSpots(
    ctx.session.shape,
    ctx.session.pixels,
    ctx.session.spots,
    ctx.session.mask,
    ctx.session.runNumber,
  );

  await replaceLastMessage(
    ctx,
    { source: buffer },
    {
      caption: `–¶–≤–µ—Ç–Ω—ã–µ –ø—è—Ç–Ω–∞ –ø–æ–¥ –∫–∞–∫–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ –æ—Ç ${
          ctx.session.runNumber * SpotsInRunNumber + 1
        } –¥–æ ${
          (ctx.session.runNumber + 1) * SpotsInRunNumber
        } —è–≤–ª—è—é—Ç—Å—è —Å–ª–æ—è–º–∏ –≤ –∫–æ–ª–±–æ—á–∫–∞—Ö?`,
    },
  );

  ctx.session = { ...ctx.session, runNumber: ctx.session.runNumber + 1 };
};

/**
 * –®–∞–±–ª–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—Å–ª–∞–Ω–æ –∏ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç –±—É—Ñ–µ—Ä–∞, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç [–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω—ë–º –ø—è—Ç–µ–Ω]{@link detectSpots}
 * –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–∞–∫–∏–µ –ø—è—Ç–Ω–∞ —è–≤–ª—è—é—Ç—Å—è —Å–ª–æ—è–º–∏ –≤ –∫–æ–ª–±–∞—Ö {@link markNextSpots}
 * @param {boolean} isDocument –ø—Ä–∏–∑–Ω–∞–∫ —Ç–æ–≥–æ, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º (–±–µ–∑ —Å–∂–∞—Ç–∏—è)
 * @param {Context} ctx –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Telegraf
 * @param {() => Promise<void>} next —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
 */
const handleImage = async (isDocument, ctx, next) => {
  markMessageForReplace(
    ctx,
    await ctx.reply('–ò—â—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –∫–æ–ª–±–æ—á–∫–∏ üëÄ'),
  );

  const fileId = isDocument ?
  ctx.update.message.document.file_id :
  ctx.update.message.photo.at(-1).file_id;
  const imageUrl = await ctx.telegram.getFileLink(fileId);
  const imageBuffer = await fetch(imageUrl).then(async (res) => {
    return Buffer.from(await res.arrayBuffer());
  });

  const [ shape, pixels, spots, mask ] = await detectSpots(
    imageBuffer,
    ctx.update.message.document?.mime_type ?? undefined,
  );

  ctx.session = {
    ...ctx.session,
    shape,
    pixels,
    spots,
    mask,
    runNumber: 0,
  };

  await markNextSpots(ctx);

  ctx.session = { ...ctx.session, waitingForNumbers: true };

  return next();
};

export const configureImageAnalysisLoop = (bot) => {
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  bot.on('photo', async (ctx, next) => {
    return handleImage(false, ctx, next);
  });

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
   */
  bot.on('document', async (ctx, next) => {
    if (ctx.update.message.document.mime_type.split('/')[0] !== 'image') {
      return next();
    }

    return handleImage(true, ctx, next);
  });

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
   * –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–ø—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ -- –µ—Å–ª–∏ –±—ã–ª –∑–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Ç–æ–º, –∫–∞–∫–∏–µ –ø—è—Ç–Ω–∞ —è–≤–ª—è—é—Ç—Å—è —Å–ª–æ—è–º–∏ –≤ –∫–æ–ª–±–∞—Ö.
   * –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –≤ –æ—Ç–≤–µ—Ç –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –¥–µ—Ñ–∏—Å–∞–º–∏ (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è).
   * –ß–∏—Å–ª–∞, –æ–∫—Ä—É–∂–∞—é—â–∏–µ –¥–µ—Ñ–∏—Å, –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É—é—Ç—Å—è –∫–∞–∫ –≥—Ä–∞–Ω–∏—Ü—ã –æ—Ç—Ä–µ–∑–∫–∞ –∏ –¥–µ—Ñ–∏—Å –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –º–µ–∂–¥—É –≥—Ä–∞–Ω–∏—Ü–∞–º–∏.
   * –û—Ç–º–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–æ–º–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Å–µ—Å—Å–∏–∏. –î–∞–ª–µ–µ —Ü–∏–∫–ª –≤–æ–ø—Ä–æ—Å–æ–≤ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏
   * –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∏—Å–∫—É —Ä–µ—à–µ–Ω–∏—è, –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
   */
  bot.on('message', async (ctx, next) => {
    if (ctx.session?.waitingForNumbers) {
      const numbers = numbersAndRangesToNumbers(ctx.update.message.text)?.map((index) => index - 1);
      if (!!numbers) {
        if (!ctx.session.spotsIndices) {
          ctx.session.spotsIndices = new Set();
        }
        numbers.forEach((number) => ctx.session.spotsIndices.add(number));
        markMessageForReplace(
          ctx,
          await ctx.reply(
            '–ï—Å—Ç—å –µ—â—ë?',
            Markup.inlineKeyboard([
              [ Markup.button.callback('–î–∞', 'mark_spots') ],
              [ Markup.button.callback('–ù–µ—Ç', 'start_solving') ],
            ]),
            { one_time_keyboard: true },
          ),
        );
      }
    }

    return next();
  });

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ü–∏–∫–ª –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Ç–æ–º, –∫–∞–∫–∏–µ –ø—è—Ç–Ω–∞ —è–≤–ª—è—é—Ç—Å—è —Å–ª–æ—è–º–∏ –≤ –∫–æ–ª–±–∞—Ö
   */
  bot.action('mark_spots', markNextSpots);
};
